{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a5adfcd6-8ace-48b6-b76a-6396c4c7663f",
   "metadata": {},
   "source": [
    "Assuming we have single cell DNA methylationd data with thousands of cells. In each cell, we have one allc file:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d94f8c03-a04c-427f-abbd-7e8a1490f015",
   "metadata": {},
   "source": [
    "```text\n",
    "chr1    3001733 +       CTG     0       1       1\n",
    "chr1    3001743 +       CAA     0       1       1\n",
    "chr1    3001746 +       CCT     0       1       1\n",
    "chr1    3001747 +       CTG     0       1       1\n",
    "chr1    3001752 +       CTG     0       1       1\n",
    "chr1    3001758 +       CTT     0       1       1\n",
    "chr1    3001761 +       CTG     0       1       1\n",
    "chr1    3001764 +       CTT     0       1       1\n",
    "chr1    3001768 +       CTT     0       1       1\n",
    "chr1    3001776 +       CTG     0       1       1\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbd6379d-024b-4d08-b37c-06072510d8e7",
   "metadata": {},
   "source": [
    "Columns are chrom, position, strand, context, mc (methylated count), cov (coverage) and fraction.\n",
    "The first four columns are shared among all cells, in this case, we don't need to store this redundant information for each cell, we can separate the reference and cell data and only store the mc and cov for each cell.\n",
    "However, we can still query and view allc with reference information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6915c867",
   "metadata": {},
   "source": [
    "## Generate allc coordinate reference .cz file"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b26a11f-3cbd-496c-999a-83bb673d6823",
   "metadata": {},
   "source": [
    "```shell\n",
    "czip AllC -G ~/Ref/mm10/mm10_ucsc_with_chrL.fa -O mm10_with_chrL.allc.cz -n 20 run\n",
    "# took 15 minutes using 20 cpus\n",
    "```\n",
    "\n",
    "```shell\n",
    "# create subset index for all CG (including forward and reverse strand)\n",
    "czip generate_ssi mm10_with_chrL.allc.cz -p CGN -o mm10_with_chrL.allc.cz.CGN.ssi\n",
    "# took about 5 minutes with 1 core\n",
    "```\n",
    "\n",
    "```shell\n",
    "# create subset index for all CG (forward strand only)\n",
    "czip generate_ssi mm10_with_chrL.allc.cz -p +CGN -o mm10_with_chrL.allc.cz.CGN.forward.ssi\n",
    "# about 5 minutes\n",
    "```\n",
    "\n",
    "```shell\n",
    "# using forward CG subset index to extract forward strand CG coordinates from reference\n",
    "czip extract -i mm10_with_chrL.allc.cz -s mm10_with_chrL.allc.cz.CGN.forward.ssi -o mm10_with_chrL.allCG.forward.cz\n",
    "# about 1m23.855s\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83c2d5dc-9010-4815-9d40-5d8b28c9ea53",
   "metadata": {},
   "source": [
    "Actually, *.ssi is also a czip file, we can view .ssi using `czip Reader -I *.ssi view -s 0`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda85669",
   "metadata": {},
   "source": [
    "## View reference .cz file"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e94bade-55d3-40a5-869b-a282e34a5868",
   "metadata": {
    "tags": []
   },
   "source": [
    "### view header"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2884e0dc-b874-4342-a1e0-9101cb7caa8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "magic  :  b'BMZIP'\n",
      "version  :  1.0\n",
      "total_size  :  3074591556\n",
      "message  :  /home/x-wding2/Ref/mm10/mm10_ucsc_with_chrL.fa\n",
      "Formats  :  ['Q', 'c', '3s']\n",
      "Columns  :  ['pos', 'strand', 'context']\n",
      "Dimensions  :  ['chrom']\n",
      "header_size  :  99\n"
     ]
    }
   ],
   "source": [
    "czip Reader -I ~/Ref/mm10/annotations/mm10_with_chrL.allc.cz print_header"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e81d5aaf-863f-4537-bd08-0fd81a7abd07",
   "metadata": {
    "tags": []
   },
   "source": [
    "### summary chunks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e293b7d4-97f4-410a-9f06-40f33f242f82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chrom\tchunk_start_offset\tchunk_size\tchunk_tail_offset\tchunk_nblocks\tchunk_nrows\n",
      "chr1\t99\t219469648\t219585440\t14459\t78962721\n",
      "chr10\t219585440\t146325915\t365988449\t9634\t52609184\n",
      "chr11\t365988449\t144624498\t510689185\t9527\t52027265\n",
      "chr12\t510689185\t135669225\t646429920\t8936\t48799752\n",
      "chr13\t646429920\t135593184\t782094542\t8927\t48750883\n",
      "chr14\t782094542\t138973134\t921140930\t9154\t49987736\n",
      "chr15\t921140930\t117415601\t1038618417\t7733\t42230765\n",
      "chr16\t1038618417\t108168134\t1146843557\t7123\t38899643\n",
      "chr17\t1146843557\t108852498\t1255753437\t7170\t39153472\n"
     ]
    }
   ],
   "source": [
    "czip Reader -I ~/Ref/mm10/annotations/mm10_with_chrL.allc.cz summary_chunks | head"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b111ff3-691e-4b0b-af65-732ea91fd3df",
   "metadata": {},
   "source": [
    "Every chunk has a dimension (chrom, sample, cell types or the combination of those dimensions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b63fc76b",
   "metadata": {},
   "source": [
    "## Converting .allc.tsv.gz into .cz file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5f5fb43-889a-419b-bb7f-6c9b9abcf6f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Showing help with the command 'czip bed2cz -- --help'.\n",
      "\n",
      "\u001b[1mNAME\u001b[0m\n",
      "    czip bed2cz - convert allc.tsv.gz to .cz file.\n",
      "\n",
      "\u001b[1mSYNOPSIS\u001b[0m\n",
      "    czip bed2cz \u001b[4mINPUT\u001b[0m \u001b[4mOUTFILE\u001b[0m <flags>\n",
      "\n",
      "\u001b[1mDESCRIPTION\u001b[0m\n",
      "    convert allc.tsv.gz to .cz file.\n",
      "\n",
      "\u001b[1mPOSITIONAL ARGUMENTS\u001b[0m\n",
      "    \u001b[1m\u001b[4mINPUT\u001b[0m\u001b[0m\n",
      "        path to allc.tsv.gz, should has .tbi index.\n",
      "    \u001b[1m\u001b[4mOUTFILE\u001b[0m\u001b[0m\n",
      "        output .cz file\n",
      "\n",
      "\u001b[1mFLAGS\u001b[0m\n",
      "    -r, --reference=\u001b[4mREFERENCE\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "        path to reference coordinates.\n",
      "    -m, --missing_value=\u001b[4mMISSING_VALUE\u001b[0m\n",
      "        Default: [0, 0]\n",
      "    -F, --Formats=\u001b[4mFORMATS\u001b[0m\n",
      "        Default: ['H', 'H']\n",
      "        When reference is provided, we only need to pack mc and cov, ['H', 'H'] is suggested (H is unsigned short integer, only 2 bytes), if reference is not provided, we also need to pack position (Q is recommanded), in this case, Formats should be ['Q','H','H'].\n",
      "    -C, --Columns=\u001b[4mCOLUMNS\u001b[0m\n",
      "        Default: ['mc', 'cov']\n",
      "        Columns names, in default is ['mc','cov'] (reference is provided), if no referene provided, one should use ['pos','mc','cov'].\n",
      "    -D, --Dimensions=\u001b[4mDIMENSIONS\u001b[0m\n",
      "        Default: ['chrom']\n",
      "        Dimensions passed to czip.Writer, dimension name, for allc file, dimension is chrom.\n",
      "    -u, --usecols=\u001b[4mUSECOLS\u001b[0m\n",
      "        Default: [4, 5]\n",
      "        default is [4, 5], for a typical .allc.tsv.gz, if no reference is provided, the columns to be packed should be [1,4,5] (pos, mv and cov). If reference is provided, then we only need to pack [4,5] (mc and cov).\n",
      "    --pr=\u001b[4mPR\u001b[0m\n",
      "        Default: 0\n",
      "        index of position column in reference .mz header columns [0]\n",
      "    --pa=\u001b[4mPA\u001b[0m\n",
      "        Default: 1\n",
      "        index of position column in input input or bed column.\n",
      "    -s, --sep=\u001b[4mSEP\u001b[0m\n",
      "        Default: '\\t'\n",
      "    -P, --Path_to_chrom=\u001b[4mPATH_TO_CHROM\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "        path to chrom_size path or similar file containing chromosomes order, the first columns should be chromosomes, tab separated and no header.\n",
      "    -c, --chunksize=\u001b[4mCHUNKSIZE\u001b[0m\n",
      "        Default: 2000\n",
      "        default is 5000\n",
      "\n",
      "\u001b[1mNOTES\u001b[0m\n",
      "    You can also use flags syntax for POSITIONAL ARGUMENTS\n"
     ]
    }
   ],
   "source": [
    "czip bed2cz --help"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffac5566-1c59-4495-bacd-f48c304c9d13",
   "metadata": {},
   "source": [
    "### Pack .allc.tsv.gz to .cz with coordinates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c766a7b-6e90-401e-823b-850e6f75b29e",
   "metadata": {},
   "source": [
    "```shell\n",
    "czip bed2cz FC_E17a_3C_1-1-I3-F13.allc.tsv.gz FC_E17a_3C_1-1-I3-F13.with_coordinate.cz -F Q,H,H -C pos,mc,cov -u 1,4,5\n",
    "# took about 2m3.650s\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "83f709a2-ca2a-4cb6-bcb8-32deb79ed6ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chrom\tpos\tmc\tcov\n",
      "chr1\t3001733\t0\t1\n",
      "chr1\t3001743\t0\t1\n",
      "chr1\t3001746\t0\t1\n",
      "chr1\t3001747\t0\t1\n",
      "chr1\t3001752\t0\t1\n",
      "chr1\t3001758\t0\t1\n",
      "chr1\t3001761\t0\t1\n",
      "chr1\t3001764\t0\t1\n",
      "chr1\t3001768\t0\t1\n"
     ]
    }
   ],
   "source": [
    "czip Reader -I FC_E17a_3C_1-1-I3-F13.with_coordinate.cz view -s 0 |head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1a4e90ca-76d5-41e6-8303-6e5fad2b235a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chrom\tpos\tmc\tcov\n",
      "chr9\t3000294\t54\t63\n",
      "chr9\t3000342\t69\t85\n",
      "chr9\t3000354\t77\t82\n",
      "chr9\t3000381\t52\t64\n",
      "chr9\t3000382\t74\t87\n",
      "chr9\t3000399\t66\t67\n",
      "chr9\t3000441\t84\t138\n",
      "chr9\t3000457\t139\t162\n",
      "chr9\t3000458\t64\t74\n",
      "chr9\t3000472\t161\t183\n"
     ]
    }
   ],
   "source": [
    "# query\n",
    "czip Reader -I FC_E17a_3C_1-1-I3-F13.with_coordinate.cz query -D chr9 -s 3000294 -e 3000472 | awk '$3>50'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7d56e17-5b1b-4c0a-83f7-dbe1255078c0",
   "metadata": {},
   "source": [
    "### Pack .allc.tsv.gz to .cz without coordinates (using reference)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f322e9e-c722-40f0-a70a-a692d9210f77",
   "metadata": {},
   "source": [
    "```shell\n",
    "czip bed2cz FC_E17a_3C_1-1-I3-F13.allc.tsv.gz FC_E17a_3C_1-1-I3-F13.cz -r ~/Ref/mm10/annotations/mm10_with_chrL.allc.cz\n",
    "# took 8m40.090s, it will be faster after implementing C/C++ version\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8d6bd818-497e-4a3e-a141-c7d2a028acc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chrom\tmc\tcov\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n",
      "chr1\t0\t0\n"
     ]
    }
   ],
   "source": [
    "czip Reader -I FC_E17a_3C_1-1-I3-F13.cz view -s 0 |head"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f6b009-9d0e-4904-aaa2-69bbc07c37ba",
   "metadata": {},
   "source": [
    "view FC_E17a_3C_1-1-I3-F13.cz together with reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "238e578f-949d-489b-9728-f0ed5c00f780",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chrom\tpos\tstrand\tcontext\tmc\tcov\n",
      "chr1\t3000003\t+\tCTG\t0\t0\n",
      "chr1\t3000005\t-\tCAG\t0\t0\n",
      "chr1\t3000009\t+\tCTA\t0\t0\n",
      "chr1\t3000016\t-\tCAA\t0\t0\n",
      "chr1\t3000018\t-\tCAC\t0\t0\n",
      "chr1\t3000019\t-\tCCA\t0\t0\n",
      "chr1\t3000023\t+\tCTT\t0\t0\n",
      "chr1\t3000027\t-\tCAA\t0\t0\n",
      "chr1\t3000029\t-\tCTC\t0\t0\n"
     ]
    }
   ],
   "source": [
    "czip Reader -I FC_E17a_3C_1-1-I3-F13.cz view -s 0 -r ~/Ref/mm10/annotations/mm10_with_chrL.allc.cz |head"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b588915a-ce89-4375-a9eb-fc4666cf6ce3",
   "metadata": {},
   "source": [
    "### Query"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a49609fb-0608-44f8-95d4-bbea79f81443",
   "metadata": {},
   "source": [
    "#### query allc.tsv.gz using tabix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e0407816-d2e4-487b-b299-bd52a63894e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chr9\t3000294\t-\tCAT\t54\t63\t1\n",
      "chr9\t3000342\t-\tCGA\t69\t85\t1\n",
      "chr9\t3000354\t-\tCGT\t77\t82\t1\n",
      "chr9\t3000381\t+\tCGT\t52\t64\t1\n",
      "chr9\t3000382\t-\tCGG\t74\t87\t1\n",
      "chr9\t3000399\t+\tCGA\t66\t67\t1\n",
      "chr9\t3000441\t+\tCGT\t84\t138\t1\n",
      "chr9\t3000457\t+\tCGT\t139\t162\t1\n",
      "chr9\t3000458\t-\tCGA\t64\t74\t1\n",
      "chr9\t3000472\t+\tCGT\t161\t183\t1\n"
     ]
    }
   ],
   "source": [
    "tabix FC_E17a_3C_1-1-I3-F13.allc.tsv.gz chr9 | awk '$5 > 50' |head"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d09d4103-0b69-4b25-be60-c388ec0254db",
   "metadata": {},
   "source": [
    "#### query allc.cz using czip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "50a1f789-9ed1-474f-82be-73e07871923d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chrom\tpos\tstrand\tcontext\tmc\tcov\n",
      "chr9\t3000294\t-\tCAT\t54\t63\n",
      "chr9\t3000342\t-\tCGA\t69\t85\n",
      "chr9\t3000354\t-\tCGT\t77\t82\n",
      "chr9\t3000381\t+\tCGT\t52\t64\n",
      "chr9\t3000382\t-\tCGG\t74\t87\n",
      "chr9\t3000399\t+\tCGA\t66\t67\n",
      "chr9\t3000441\t+\tCGT\t84\t138\n",
      "chr9\t3000457\t+\tCGT\t139\t162\n",
      "chr9\t3000458\t-\tCGA\t64\t74\n",
      "chr9\t3000472\t+\tCGT\t161\t183\n"
     ]
    }
   ],
   "source": [
    "czip Reader -I FC_E17a_3C_1-1-I3-F13.cz query -r ~/Ref/mm10/annotations/mm10_with_chrL.allc.cz -D chr9 -s 3000294 -e 3000472 |awk '$5>50'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cdafe6b",
   "metadata": {},
   "source": [
    "## Cat multiple .cz files into one .cz file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ef5d0f62-e0c7-46d3-948e-b20e8db1c2b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Showing help with the command 'czip Writer -O cat.cz -F Q,c,3s -C pos,strand,context -D chrom catcz -- --help'.\n",
      "\n",
      "\u001b[1mNAME\u001b[0m\n",
      "    czip Writer -O cat.cz -F Q,c,3s -C pos,strand,context -D chrom catcz - Cat multiple .cz files into one .cz file.\n",
      "\n",
      "\u001b[1mSYNOPSIS\u001b[0m\n",
      "    czip Writer -O cat.cz -F Q,c,3s -C pos,strand,context -D chrom catcz <flags>\n",
      "\n",
      "\u001b[1mDESCRIPTION\u001b[0m\n",
      "    Cat multiple .cz files into one .cz file.\n",
      "\n",
      "\u001b[1mFLAGS\u001b[0m\n",
      "    -I, --Input=\u001b[4mINPUT\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "        Either a str (including *, as input for glob, should be inside the double quotation marks if using fire) or a list.\n",
      "    -d, --dim_order=\u001b[4mDIM_ORDER\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "        If dim_order=None, Input will be sorted using python sorted. If dim_order is a list, tuple or array of basename.rstrip(.cz), sorted as dim_order. If dim_order is a file path (for example, chrom size path to dim_order chroms or only use selected chroms) will be sorted as the 1st column of the input file path (without header, tab-separated). default is None\n",
      "    -a, --add_dim=\u001b[4mADD_DIM\u001b[0m\n",
      "        Default: False\n",
      "        whether to add .cz file names as an new dimension to the merged .cz file. For example, we have multiple .cz files for many cells, in each .cz file, the dimensions are ['chrom'], after merged, we would like to add file name of .cz as a new dimension ['cell_id']. In this case, the dimensions in the merged header would be [\"chrom\",\"cell_id\"], and in each chunk, in addition to the previous dim ['chr1'] or ['chr22'].., a new dim would also be append to the previous dim, like ['chr1','cell_1'], ['chr22','cell_100'].\n",
      "\n",
      "        However, if add_dim is a function, the input to this function is the .cz file basename, the returned value from this funcion would be used as new dim and added into the chunk_dims. The default function to convert filename to dim name is self.create_new_dim.\n",
      "    -t, --title=\u001b[4mTITLE\u001b[0m\n",
      "        Default: 'filename'\n",
      "        if add_dim is True or a python function, title would be append to the header['Dimensions'] of the merged .cz file's header. If the title of new dimension had already given in Writer Dimensions, title can be None, otherwise, title should be provided.\n"
     ]
    }
   ],
   "source": [
    "czip Writer -O cat.cz -F Q,c,3s -C pos,strand,context -D chrom catcz --help"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6e597c-c97b-4462-ac8d-9cbf0c1924a9",
   "metadata": {},
   "source": [
    "```shell\n",
    "czip Writer -O mm10_with_chrL.allc.cz -F Q,c,3s -C pos,strand,context -D chrom catcz -I \"cell_type/*.cz\" \\\n",
    "            --dim_order ~/Ref/mm10/mm10_ucsc_with_chrL.chrom.sizes --add_dim True --title \"cell_id\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb5529b4-8b41-4578-a493-87de1ec083c9",
   "metadata": {},
   "source": [
    "In this example, we cat multiple .cz file into one .cz file and add another dimension to each chunk (cell_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3334dae7-ae66-4bca-8957-e28031b57a65",
   "metadata": {},
   "source": [
    "## Extract CG from .cz and merge strand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7b7393e0-c6df-43c3-8073-189d8acc97a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Showing help with the command 'czip extractCG -- --help'.\n",
      "\n",
      "\u001b[1mNAME\u001b[0m\n",
      "    czip extractCG\n",
      "\n",
      "\u001b[1mSYNOPSIS\u001b[0m\n",
      "    czip extractCG <flags>\n",
      "\n",
      "\u001b[1mFLAGS\u001b[0m\n",
      "    -i, --input=\u001b[4mINPUT\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -o, --outfile=\u001b[4mOUTFILE\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -s, --ssi=\u001b[4mSSI\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "        ssi should be ssi to mm10_with_chrL.allc.cz.CGN.ssi, not forward strand ssi, but after merge (if merge_strand is True), forward ssi mm10_with_chrL.allc.cz.+CGN.ssi should be used to generate reference, one can\n",
      "    -c, --chunksize=\u001b[4mCHUNKSIZE\u001b[0m\n",
      "        Default: 5000\n",
      "    -m, --merge_strand=\u001b[4mMERGE_STRAND\u001b[0m\n",
      "        Default: True\n",
      "        after merging, only forward strand would be kept, reverse strand values would be added to the corresponding forward strand.\n"
     ]
    }
   ],
   "source": [
    "czip extractCG --help"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cdd4e35-918d-4349-afe9-c29ed634dca1",
   "metadata": {},
   "source": [
    "```shell\n",
    "czip extractCG -i cz/FC_P13a_3C_2-1-E5-D13.cz -o FC_P13a_3C_2-1-E5-D13.CGN.cz -s ~/Ref/mm10/annotations/mm10_with_chrL.allc.cz.CGN.ssi\n",
    "\n",
    "# view CG .cz\n",
    "czip Reader -I FC_P13a_3C_2-1-E5-D13.CGN.cz view -s 0 -r ~/Ref/mm10/annotations/mm10_with_chrL.allCG.forward.cz\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a44ee6da-9a4c-4dca-be9d-9b70230bc4bf",
   "metadata": {},
   "source": [
    "## Merge multiple .cz files into one .cz file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d71ee1d6-b9e1-4c6a-b521-55f81243a523",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Showing help with the command 'czip merge_cz -- --help'.\n",
      "\n",
      "\u001b[1mNAME\u001b[0m\n",
      "    czip merge_cz\n",
      "\n",
      "\u001b[1mSYNOPSIS\u001b[0m\n",
      "    czip merge_cz <flags>\n",
      "\n",
      "\u001b[1mFLAGS\u001b[0m\n",
      "    -i, --indir=\u001b[4mINDIR\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -c, --cz_paths=\u001b[4mCZ_PATHS\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -o, --outfile=\u001b[4mOUTFILE\u001b[0m\n",
      "        Default: 'merged.cz'\n",
      "    -n, --n_jobs=\u001b[4mN_JOBS\u001b[0m\n",
      "        Default: 12\n",
      "    -f, --formats=\u001b[4mFORMATS\u001b[0m\n",
      "        Default: ['I', 'I']\n",
      "    -P, --Path_to_chrom=\u001b[4mPATH_TO_CHROM\u001b[0m\n",
      "        Default...\n",
      "    -k, --keep_cat=\u001b[4mKEEP_CAT\u001b[0m\n",
      "        Default: False\n",
      "    -b, --batchsize=\u001b[4mBATCHSIZE\u001b[0m\n",
      "        Default: 10\n"
     ]
    }
   ],
   "source": [
    "czip merge_cz --help"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de17b13a-97ad-46b2-979c-93dc25f7af76",
   "metadata": {},
   "source": [
    "```shell\n",
    "czip merge_mz -i cz-CGN/ -o merged.cz\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3870f546-3f79-4b47-9bc2-d52841260f3b",
   "metadata": {},
   "source": [
    "## Merge .cz files belonging to the same cell type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b9bcba65-3901-49d4-96cd-b934fad474d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Showing help with the command 'czip merge_cell_type -- --help'.\n",
      "\n",
      "\u001b[1mNAME\u001b[0m\n",
      "    czip merge_cell_type\n",
      "\n",
      "\u001b[1mSYNOPSIS\u001b[0m\n",
      "    czip merge_cell_type <flags>\n",
      "\n",
      "\u001b[1mFLAGS\u001b[0m\n",
      "    -i, --indir=\u001b[4mINDIR\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -c, --cell_table=\u001b[4mCELL_TABLE\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -o, --outdir=\u001b[4mOUTDIR\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -n, --n_jobs=\u001b[4mN_JOBS\u001b[0m\n",
      "        Default: 64\n",
      "    -P, --Path_to_chrom=\u001b[4mPATH_TO_CHROM\u001b[0m\n",
      "        Type: Optional[]\n",
      "        Default: None\n",
      "    -e, --ext=\u001b[4mEXT\u001b[0m\n",
      "        Default: '.CGN.merged.cz'\n"
     ]
    }
   ],
   "source": [
    "czip merge_cell_type --help"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31f01837-73e7-4b8e-a6ec-bb4ecb5d9d97",
   "metadata": {},
   "source": [
    "## Run czip allc2cz on GCP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "791fe449-ed7d-48b8-87b6-5d9907636b55",
   "metadata": {},
   "source": [
    "```shell\n",
    "wget https://raw.githubusercontent.com/DingWB/czip/main/data/allc2mz.smk\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1d9250f-8935-4ef6-b566-e9a4047048c3",
   "metadata": {},
   "source": [
    "```shell\n",
    "snakemake --printshellcmds --immediate-submit --notemp -s allc2mz.smk --config indir=\"gs://mouse_pfc/test_allc\" outdir=\"test_mz\" \\\n",
    "            reference=\"mm10_with_chrL.allc.cz\" ref_prefix=\"gs://wubin_ref/mm10/annotations\" \\\n",
    "            chrom=\"mm10_ucsc_with_chrL.main.chrom.sizes.txt\" chrom_prefix=\"gs://wubin_ref/mm10\" \\\n",
    "            gcp=True --default-remote-prefix mouse_pfc --default-remote-provider GS \\\n",
    "            --google-lifesciences-region us-west1 --scheduler greedy -j 96 -np\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "936cf9d7",
   "metadata": {},
   "source": [
    "## Run czip extractCG on GCP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eefde956-7352-4954-b7e6-1969ce5beee0",
   "metadata": {},
   "source": [
    "```shell\n",
    "wget https://raw.githubusercontent.com/DingWB/czip/main/data/extractCG.smk\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8c845e-d775-4bc9-9573-dab7f5c4c13b",
   "metadata": {},
   "source": [
    "```shell\n",
    "snakemake --use-conda --printshellcmds -s extractCG.smk \\\n",
    "          --config algorithm=\"bmzip\" indir=test_mz files_path=mz.path\".0$SKYPILOT_NODE_RANK\" \\\n",
    "          outdir=pfc_mz-CGN bmi=mm10_with_chrL.allc.mz.CGN.bmi bmi_prefix=gs://wubin_ref/mm10/annotations \\\n",
    "          gcp=True --default-remote-prefix mouse_pfc --default-remote-provider GS \\\n",
    "          --google-lifesciences-region us-west1 --scheduler greedy -j 96\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "yap",
   "language": "python",
   "name": "yap"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
